{
  "mongo_shell": {
    "db_help": {
      "description": "Help on DB methods",
      "commands": [
        "db.help()"
      ]
    },
    "db_collection_help": {
      "description": "Help on collection methods",
      "commands": [
        "db.<collection>.help()"
      ]
    },
    "show_dbs": {
      "description": "Show all available DBs",
      "commands": [
        "show dbs"
      ]
    },
    "show_collections": {
      "description": "Show all available collections",
      "commands": [
        "show collections"
      ]
    },
    "use_db": {
      "description": "Switch DB",
      "commands": [
        "use <db_name>"
      ]
    },
    "find": {
      "description": "Find specific documents with query",
      "commands": [
        "db.<collection>.find({<query>})"
      ]
    },
    "pretty": {
      "description": "Show the pretty view of documents",
      "commands": [
        "db.<collection>.find().pretty()"
      ]
    },
    "count": {
      "description": "Count documents",
      "commands": [
        "db.<collection>.count()"
      ]
    },
    "exit": {
      "description": "Exit mongo shell",
      "commands": [
        "exit"
      ]
    }
  },
  "query_and_projection": {
    "comparison_operators": {
      "eq": {
        "description": "Matches values that are equal to a specified value",
        "commands": [
          "db.<col>.find({$eq:<value>})"
        ]
      },
      "gt": {
        "description": "Matches values that are greater than a specified values",
        "commands": [
          "db.<col>.find({$gt:<value>})"
        ]
      },
      "gte": {
        "description": "Matches values that are greater than or equal to a specified value",
        "commands": [
          "db.<col>.find({$gte:<value>})"
        ]
      },
      "lt": {
        "description": "Matches values that are less than a specified value",
        "commands": [
          "db.<col>.find({$lt:<value>})"
        ]
      },
      "lte": {
        "description": "Matches values that are less than or equal to a specified value",
        "commands": [
          "db.<col>.find({$lte:<value>})"
        ]
      },
      "ne": {
        "description": "Matches all values that are not equal to a specified value",
        "commands": [
          "db.<col>.find({$ne:<value>})"
        ]
      },
      "in": {
        "description": "Matches any of the values specified in an array",
        "commands": [
          "db.<col>.find({$in:<array>})"
        ]
      },
      "nin": {
        "description": "Matches none of the values specified in an array",
        "commands": [
          "db.<col>.find({$nin:<array>})"
        ]
      }
    },
    "logical_operators": {
      "or": {
        "description": "Joins query clauses with a logical OR",
        "commands": [
          "db.<col>.find({$or:<array>})"
        ]
      },
      "and": {
        "description": "Joins query clauses with a logical AND",
        "commands": [
          "db.<col>.find({$and:<array>})"
        ]
      },
      "not": {
        "description": "Inverts the effect of a query expression",
        "commands": [
          "db.<col>.find({<key>:{$not:<value>}})"
        ]
      },
      "nor": {
        "description": "Joins query clauses with a logical NOR",
        "commands": [
          "db.<col>.find({$nor:<array>})"
        ]
      }
    },
    "element_operators": {
      "exists": {
        "description": "Find documents with specific field",
        "commands": [
          "db.<col>.find({<key>:{$exists:<boolean>}})"
        ]
      },
      "type": {
        "description": "Find documents with the specified type of field",
        "commands": [
          "db.<col>.find({<key>:{$type:<type>}})"
        ]
      }
    },
    "evaluation_operators": {
      "mod": {
        "description": "Performs a modulo operation on the value of a field, selecting documents with a specified result.",
        "commands": [
          "db.<col>.find({<key>:{$mod: [<int>, <int>]}})"
        ]
      },
      "regex": {
        "description": "Selects douments matching specific regex",
        "commands": [
          "db.<col>.find({<key>:{$regex: <expression>}})"
        ]
      },
      "text": {
        "description": "Performs text search",
        "commands": [
          "db.<col>.find({$text: {$search:<string>,$language:<string>,$caseSensitive:<boolean>,$diacriticSensitive:<boolean>}})"
        ]
      },
      "where": {
        "description": "Selects documents matching a JS expression",
        "commands": [
          "db.<col>.find({$where: <JS>})"
        ]
      }
    },
    "geospatial_operators": {},
    "array_operators": {
      "all": {
        "description": "Matches arrays that contain all elements specified in the query.",
        "commands": [
          "db.<col>.find({<field>:{$all:<array>}})"
        ]
      },
      "elemMatch": {
        "description": "Selects documents if element in the array field matches all the specified $elemMatch conditions",
        "commands": [
          "db.<col>.find({<field>:{$elemMatch:{<query>, <query>,...}}})"
        ]
      },
      "size": {
        "description": "Selects documents if the array field is a specified size",
        "commands": [
          "db.<col>.find({<field>:{$size:<int>}})"
        ]
      }
    },
    "bitwise_operators": {},
    "comments_operators": {
      "comment": {
        "description": "Add comment",
        "commands": [
          "db.<col>.find({$comment: <comment>})"
        ]
      }
    },
    "projection_operators": {
      "$": {
        "description": "Projects the first element of matching array",
        "commands": [
          "db.<col>.find({},{'<field>.$':1})"
        ]
      },
      "meta": {
        "description": "Projects the document's score assigned during $text operation",
        "commands": [
          "db.<col>.find({$meta: <metaDataKeyword>})"
        ]
      },
      "elemMatch": {
        "description": "Selects documents if element in the array field matches all the specified $elemMatch conditions",
        "commands": [
          "db.<col>.find({<field>:{$elemMatch:{<query>, <query>,...}}})"
        ]
      },
      "slice": {
        "description": "Limit the number of elements projected from an array",
        "commands": [
          "db.<col>.find({}, {<field>:{$slice:<number>||<array>}})"
        ]
      }
    }
  },
  "update": {}
}